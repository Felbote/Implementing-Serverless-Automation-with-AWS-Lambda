import os
import subprocess
import textwrap


# === 1Ô∏è‚É£ Create Directory Structure ===
def create_directory_structure():
    dirs = [
        "aws_project/s3/source_bucket",
        "aws_project/s3/destination_bucket",
        "aws_project/iam_role",
        "aws_project/lambda_function",
        "aws_project/lambda_layer/python/lib/python3.11/site-packages"
    ]
    for d in dirs:
        os.makedirs(d, exist_ok=True)
    print("‚úÖ Directories created successfully!")


# === 2Ô∏è‚É£ Create IAM Role Documentation (local) ===
def create_iam_role_doc():
    role_text = textwrap.dedent("""\
        Role Name: LambdaS3ResizeRole
        Trusted Entity: AWS Lambda
        Policies Attached:
        - AmazonS3FullAccess
        - AWSLambdaBasicExecutionRole

        Purpose: Allows the Lambda function to read/write S3 buckets and write logs to CloudWatch.
    """)
    with open("aws_project/iam_role/LambdaS3ResizeRole.txt", "w") as f:
        f.write(role_text)
    print("üßæ IAM Role documentation created.")


# === 3Ô∏è‚É£ Create the Lambda Function Code ===
def create_lambda_function():
    lambda_code = textwrap.dedent("""\
        import boto3
        import os
        from PIL import Image
        import io

        s3 = boto3.client('s3')

        def lambda_handler(event, context):
            print("üì• Event received:", event)

            # Extract event details
            source_bucket = event['Records'][0]['s3']['bucket']['name']
            source_key = event['Records'][0]['s3']['object']['key']
            destination_bucket = os.environ.get('DEST_BUCKET', 'your-blog-public-assets')

            # Download the image from the source bucket
            response = s3.get_object(Bucket=source_bucket, Key=source_key)
            image_content = response['Body'].read()

            # Resize the image using Pillow
            image = Image.open(io.BytesIO(image_content))
            image = image.resize((800, 800))  # Example resize to 800x800

            # Convert to bytes and upload to the destination bucket
            buffer = io.BytesIO()
            image.save(buffer, 'JPEG')
            buffer.seek(0)

            s3.put_object(
                Bucket=destination_bucket,
                Key=f"resized/{os.path.basename(source_key)}",
                Body=buffer,
                ContentType='image/jpeg',
                ACL='public-read'
            )

            print(f"‚úÖ Image {source_key} resized and saved to {destination_bucket}/resized/")
            return {"status": "success", "file": source_key}
    """)
    with open("aws_project/lambda_function/my-image-processor.py", "w") as f:
        f.write(lambda_code)
    print("‚öôÔ∏è Lambda function created: my-image-processor.py")


# === 4Ô∏è‚É£ Install Pillow into the Layer ===
def install_pillow_to_layer():
    target_dir = "aws_project/lambda_layer/python/lib/python3.11/site-packages"
    print("üì¶ Installing Pillow into the layer...")
    subprocess.check_call(["pip", "install", "Pillow", "-t", target_dir])
    print("‚úÖ Pillow installed successfully in the layer!")


# === 5Ô∏è‚É£ Zip the Layer ===
def zip_layer():
    print("üóúÔ∏è Zipping Pillow layer...")
    subprocess.check_call(["zip", "-r", "aws_project/pillow_layer.zip", "aws_project/lambda_layer"])
    print("‚úÖ pillow_layer.zip created successfully!")


# === Main Execution ===
if __name__ == "__main__":
    create_directory_structure()
    create_iam_role_doc()
    create_lambda_function()
    install_pillow_to_layer()
    zip_layer()

    print("\nüéØ Full project structure created successfully!")
    print("üìÅ Main directories:")
    print(" - aws_project/s3/source_bucket/")
    print(" - aws_project/s3/destination_bucket/")
    print(" - aws_project/iam_role/LambdaS3ResizeRole.txt")
    print(" - aws_project/lambda_function/my-image-processor.py")
    print(" - aws_project/lambda_layer/python/lib/python3.11/site-packages/")
    print(" - aws_project/pillow_layer.zip")